name: kafka-open-source-integration
displayName: Kafka Open Source Integration
description: New Relic install recipe for default kafka Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-kafka

installTargets:
  - type: host
    os: linux
    platform: amazon
    platformVersion: "2"
  - type: host
    os: linux
    platform: "centos"
  - type: host
    os: linux
    platform: "redhat"

# keyword convention for dealing with search terms that could land someone on this instrumentation project
keywords:
  - Infrastructure
  - Integration
  - kafka

# Examine Infrastructure events for correlated data
processMatch:
  - kafka
  - zookeeper

# Matches partial list of the Log forwarding parameters
# https://docs.newrelic.com/docs/logs/enable-log-management-new-relic/enable-log-monitoring-new-relic/forward-your-logs-using-infrastructure-agent#parameters
logMatch:
  - name: kafka
    file: /etc/kafka/kafka_2.13-2.6.1/kafka.log

# NRQL the newrelic-cli will use to validate the agent/integration this recipe
# installed is successfully sending data to New Relic
validationNrql: "SELECT count(*) from KafkaBrokerSample where hostname like '{{.HOSTNAME}}%' FACET entityGuid SINCE 10 minutes ago"

inputVars:
  - name: "NR_CLI_USING_AUTHORIZATION"
    prompt: "Do you want to authenticate your connection ? (y/n)"
    default: n
  - name: "NR_CLI_CLUSTERNAME"
    prompt: "Provide clustername"
  - name: "NR_CLI_KAFKA_VERSION"
    prompt: "Version of kafka broker you are connecting to (default: 1.0.0)"
    default: "1.0.0"
  - name: "NR_CLI_AUTODISCOVER_STRATEGY"
    prompt: "Method of discovering brokers (zookeeper / bootstrap) (default: zookeper)" 
    default: "zookeeper"
  - name: "NR_CLI_ZOOKEPER_HOSTS"
    prompt: "List of Zookeeper hosts in json format"
  - name: "NR_CLI_ZOOKEPER_AUTH_SCHEME"
    prompt: "zookeeper authentication scheme (digest, none)"
    defult: none
  - name: "NR_CLI_ZOOKEEPER_AUTH_SECRET"
    prompt: "Zookeeper auth secret (username:password)"
  - name: "NR_CLI_ZOOKEEPER_PATH"
    prompt: "Zookeeper node under wchich kafka configuration resides"
    default: /
  - name: "NR_CLI_ZOOKEEPER_PREFERRED_LISTENER"
    prompt: "Use a specific listener to connect to a broker (PLAINTEXT, SSL_PLAINTEXT, SSL, SASL_SSL)"
  - name: "NR_CLI_BOOTSTRAP_BROKER_HOST"
    prompt: "Host for bootstrap broker"
    default: localhost
  - name: "NR_CLI_BOOTSTRAP_BROKER_KAFKA_PORT"
    prompt: "Port for bootstrap broker"
    default: "Port for bootstrap broker"
  - name: "NR_CLI_BOOTSTRAP_BROKER_JMX_PORT"
    promot: "JMX Port broker"
    default: "JMX port for broker"
  - name: "NR_CLI_BOOTSTRAP_BROKER_KAFKA_PROTOCOL"
    prompt: "Kafka protocol broker"
  - name: "NR_CLI_BOOTSTRAP_BROKER_JMX_USER"
    prompt: "JMX user broker"
  - name: "NR_CLI_BOOTSTRAP_BROKER_JMX_PASSWORD"
    prompt: "JMX user password"
  - name: "NR_CLI_PRODUCER_CONFIG"
    prompt: 'Producer name / hostname(optional if default present) / port(optional if default present) / username(optional if default present) / password(optional if default present) (example: {"name": "my-producer", "host": "localhost", "port": 9989}'
  - name: "NR_CLI_CONSUMER_CONFIG"
    prompt: 'Consumer name / hostname(optional if default present) / port(optional if default present) / username(optional if default present) / password (optional if default present) (example: {"name": "my-consumer", "host": "localhost", "port": 9987})'
  - name: "NR_CLI_USING_COLLECTION_FILTERING"
    prompt: "Are you using Collection filtering ? (y/n)"
    default: n
  - name: "NR_CLI_COLLECTION_FILTERING_TOPIC_MODE"
    prompt: "Collection filtering topic mode (all, none, list, regex)"
  - name: "NR_CLI_COLLECTION_FILTERING_TOPIC_DATA"
    prompt: "Collection filtering topic data (true/false) (default: true)"
    default: true
  - name: "NR_CLI_COLLECTION_FILTERING_LOCAL_ONLY_COLLECTION"
    prompt: "Collection filtering local only"
    default: false
  - name: "NR_CLI_COLLECTION_FILTERING_CONSUMER_GROUP_REGEX"
    prompt: "Collection filtering consumer group regex pattern"
  - name: "NR_CLI_COLLECTION_FILTERING_COLLECT_TOPIC_SIZE"
    prompt: "Collection filtering collect topic size (true/false)"
    default: false
  - name: "NR_CLI_COLLECTION_FILTERING_TOPIC_LIST"
    prompt: 'Array of topics to monitor (only if topic_mode is set top list'
  - name: "NR_CLI_COLLECTION_FILTERING_TOPIC_REGEX"
    prompt: "Regex pattern to monitor topics (only if topic_mode is set to regex)"
  - name: 'NR_CLI_COLLECTION_FILTERING_TOPIC_BUCKET'
    prompt: "Used to split topic collection across multiple instances"
    default: 1/1
  - name: "NR_CLI_USING_SASL"
    prompt: "Are you using SASL ? (y/n)"
    default: n
  - name: "NR_CLI_SASL_MECHANISM"
    prompt: "Type of SASL authentication (SCRAM-SHA-512, SCRAM-SHA-256, PLAIN, GSSAPI)"
  - name: "NR_CLI_SASL_GSSAPI_REALM"
    prompt: "Kerberos realm"
  - name: "NR_CLI_SASL_GSSAPI_SERVICE_NAME"
    prompt: "Kerberos service name"
  - name: "NR_CLI_SASL_GSSAPI_USERNAME"
    prompt: "Kerberos username"
  - name: "NR_CLI_SASL_GSSAPI_KEY_TAB_PATH"
    prompt: "Path to kerberos keytab file"
  - name: "NR_CLI_SASL_GSSAPI_KERBEROS_CONFIG_PATH"
    prompt: "Path to kerberos config path"
  - name: "NR_CLI_USING_JMX_CONNECTION_OPTIONS"
    prompt: "Are you using JMX Connection options ? (y/n)"
    default: n
  - name: "NR_CLI_USING_JMX_SSL"
    prompt: "Are you using ssl for JMX connection ? (y/n)"
    default: n
  - name: "NR_CLI_KEYSTORE_FILE"
    prompt: "Path to keystore file"
  - name: "NR_CLI_KEYSTORE_PASSWORD"
    prompt: "Keystore password"
    secret: true
  - name: "NR_CLI_TRUSTSTORE_FILE"
    prompt: "Path to trustsore file"
  - name: "NR_CLI_TRUSTSTORE_PASSWORD"
    prompt: "Truststore passwsord"
  - name: "NR_CLI_DEFAULT_JMX_HOST"
    prompt: "Default JMX host"
  - name: "NR_CLI_DEFAULT_JMX_PORT"
    prompt: "Default JMX port"
  - name: "NR_CLI_DEFAULT_JMX_USER"
    prompt: "Default JMX user"
  - name: "NR_CLI_DEFAULT_JMX_PASSWORD"
    prompt: "Default JMX password"
  - name: "NR_CLI_USING_SSL"
    prompt: "Are you using SSL ? (y/n)"
    default: n
  - name: "NR_CLI_TLS_CA_FILE"
    prompt: "Path to tls ca file"
  - name: "NR_CLI_TLS_CERT_FILE"
    prompt: "Path to tls cert file"
  - name: "NR_CLI_TLS_KEY_FILE"
    prompt: "Path to tls key file"
  - name: "NR_CLI_TLS_INSECURE_KEY_FILE"
    prompt: "TlS insecure key file? (y/n)"
    default: n

install:

  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: setup
        - task: restart
        
    assert_pre_req:
      cmds:
        - |
          SERVICE_EXIST=$(sudo systemctl status newrelic-infra.service | grep "Active" | wc -l)
          if [ $SERVICE_EXIST -eq 0 ]; then
            echo "The newrelic-infra agent service is NOT installed on the host, but is required to install this integration." >> /dev/stderr
            exit 1
          fi

    setup:
      label: "Installing kafka integration..."
      cmds:
        - |
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"
        - |
          sudo yum update -y
        - |
          sudo yum install nri-kafka -y
        - |
          if [ -f /etc/newrelic-infra/integrations.d/kafka-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/kafka-config.yml;
          fi

          sudo cp /etc/newrelic-infra/integrations.d/kafka-config.yml.sample /etc/newrelic-infra/integrations.d/kafka-config.yml;

        - |
          if [ "{{.NR_CLI_USING_JMX_CONNECTION_OPTIONS}}" == "y" ]; then
            sudo tee /etc/newrelic-infra/integrations.d/kafka-config.yml > /dev/null <<"EOT"
            integration_name: com.newrelic.kafka
            echo "config file here"
            EOT
          else
            echo "Not using default JMX connection options."
          fi

          if [ "{{.NR_CLI_USING_AUTHORIZATION}}" == "y" ]; then
            if [ "{{.NR_CLI_USING_SSL}}" == "y" ]; then
              sudo tee /etc/newrelic-infra/integrations.d/kafka-config.yml > /dev/null <<"EOT"
              integration_name: com.newrelic.kafka
              echo "config file here"
              EOT
            else
              echo "Not using SSL."
            fi

            if [ "{{.NR_CLI_USING_JMX_SSL}}" == "y" ]; then
              sudo tee /etc/newrelic-infra/integrations.d/kafka-config.yml > /dev/null <<"EOT"
              integration_name: com.newrelic.kafka
              echo "config file here"
              EOT
            else
              echo "Not using JMX SSL."
            fi

            if [ "{{.NR_CLI_USING_SASL}}" == "y" ]; then
              sudo tee /etc/newrelic-infra/integrations.d/kafka-config.yml > /dev/null <<"EOT"
              integration_name: com.newrelic.kafka
              echo "config file here"
              EOT
            else
              echo "Not using SASL."
            fi

          else
            sudo tee /etc/newrelic-infra/integrations.d/kafka-config.yml > /dev/null <<"EOT"
          integration_name: com.newrelic.kafka

          instances:
            - name: kafka-metrics
              command: metrics
              arguments:
                zookeeper_hosts: '[{"host": "localhost", "port": 2181}]'
                producers: '[{"name": "my-producer", "host": "localhost", "port": 9989}]'
                consumers: '[{"name": "my-consumer", "host": "localhost", "port": 9987}]'
                topic_mode: {{.NR_CLI_COLLECTION_FILTERING_TOPIC_MODE}}
                collect_topic_size: {{.NR_CLI_COLLECTION_FILTERING_COLLECT_TOPIC_SIZE}}
                topic_list: '["{{.NR_CLI_COLLECTION_FILTERING_TOPIC_LIST}}"]'

            - name: kafka-inventory
              command: inventory
              arguments:
                zookeeper_hosts: '[{"host": "localhost", "port": 2181}]'
                topic_mode: {{.NR_CLI_COLLECTION_FILTERING_TOPIC_MODE}}
                topic_list: '["{{.NR_CLI_COLLECTION_FILTERING_TOPIC_LIST}}"]'
                
            - name: kafka-consumer-offsets
              command: consumer_offset
              arguments:
                zookeeper_hosts: '[{"host": "localhost", "port": 2181}]'
                consumer_group_regex: '{{.NR_CLI_COLLECTION_FILTERING_CONSUMER_GROUP_REGEX}}'

          EOT
          fi

    restart:
      cmds:
        - sudo systemctl restart newrelic-infra.service
