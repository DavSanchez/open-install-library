# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

# Expected Variables:
#   SERVICE_NAME - string value indicating syslog install

name: ktranslate-syslog-installer
displayName: Ktranslate agent integration
description: New Relic install recipe for the ktranslate network agent
repository: https://github.com/kentik/ktranslate

installTargets:
  - type: host
    os: linux
    platformFamily: "debian"
  - type: host
    os: linux
    platformFamily: "rhel"

keywords:
  - Network
  - Agent
  - Linux
  - Debian
  - Jessie
  - Stretch
  - Buster
  - Ubuntu
  - Precise
  - Trusty
  - Xenial
  - Bionic
  - Focal
  - Jammy
  - CentOS 7
  - CentOS 8
  - RHEL 7
  - RHEL 8
  - RHEL 9
  - Amazon Linux
  - Amazon Linux AMI
  - Amazon Linux 2
  - Amazon Linux 2022

processMatch: []

successLinkConfig:
  type: EXPLORER

preInstall:
  info: |2
    The ktranslate installer will use the package manager for your system (rpm/deb)

  requireAtDiscovery: |
    # Check required input variables - this effectively removes the ktranslate install from the
    # default guided install mode where discovery takes place
    if [[ -z "${SERVICE_NAME}" ]]; then
      echo "SERVICE_NAME env var must be set" >&2
      exit 47
    fi
    exit 0

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: input_assert
        - task: setup_packagecloud_repository
        - task: install_ktranslate
        - task: setup_env
        - task: configure_snmp_base
        - task: restart
        - task: assert_agent_started
        - task: assert_agent_status_ok
        - task: post_install_message

    assert_pre_req:
      cmds:
        - |
          IS_ROOT_OR_SUDO=$([ ! -z "$SUDO_USER" ] || [ $(whoami) = "root" ] && echo "true" || echo "false") # Assert root or sudo user
          if [ "$IS_ROOT_OR_SUDO" = "false" ]; then
            echo "This newrelic install must be run under sudo or root" >&2
            exit 3
          fi
        - |
          IS_DOCKER_CONTAINER_CGROUP=$(grep 'docker\|lxc' /proc/1/cgroup | wc -l)
          if [ $IS_DOCKER_CONTAINER_CGROUP -gt 0 ] ; then
            echo "docker detected with cgroup, unsupported" >&2
            exit 131
          fi
        - |
          IS_DOCKER_CONTAINER_ENVIRON=$(grep container=lxc /proc/1/environ | wc -l)
          if [ $IS_DOCKER_CONTAINER_ENVIRON -gt 0 ] ; then
            echo "docker detected with environ, unsupported" >&2
            exit 131
          fi
        - |
          if [[ -f /.dockerenv ]] ; then
            echo "docker detected with .dockerenv, unsupported" >&2
            exit 131
          fi
        - |
          IS_WSL_CONTAINER=$(grep -i 'Microsoft' /proc/version | wc -l)
          if [ $IS_WSL_CONTAINER -gt 0 ] ; then
            echo "microsoft Windows Subsystem for Linux detected, unsupported" >&2
            exit 131
          fi
        - |
          # Map of tool names to the associated error code
          required_tools_and_error_codes="grep:10 sed:11 awk:12 cat:13 tee:14 touch:15 tr:16"

          for tuple in $required_tools_and_error_codes; do
            tool=$(echo ${tuple} |cut -d':' -f1)
            code=$(echo ${tuple} |cut -d':' -f2)

            IS_TOOL_INSTALLED=$(which ${tool} | wc -l)
            if [ "$IS_TOOL_INSTALLED" -eq 0 ]
            then
              echo -e "{{.RED}}This installation requires '${tool}' to be installed.{{.NOCOLOR}}" >> /dev/stderr
              exit ${code}
            fi
          done

    input_assert:
      cmds:
        - |
          # Check Env Vars
          SERVICE_NAME="{{.SERVICE_NAME}}"

          # Check required input variables
          if [[ -z "${SERVICE_NAME}" ]]; then
            echo "SERVICE_NAME env var must be set" >&2
            exit 47
          fi

    setup_packagecloud_repository:
      cmds:
        - |
          if [ "{{.PLATFORM_FAMILY" == "debian" ]; then
            curl -s https://packagecloud.io/install/repositories/kentik/ktranslate/script.deb.sh | sudo bash > /dev/null
          else
            curl -s https://packagecloud.io/install/repositories/kentik/ktranslate/script.rpm.sh | sudo bash
          fi
      silent: true

    install_ktranslate:
      cmds:
        - |
          if [ "{{.PLATFORM_FAMILY" == "debian" ]; then
            sudo apt-get install ktranslate -y > /dev/null
          else
            sudo yum install ktranslate -q -y > /dev/null
          fi
      slient: true

    setup_env:
      cmds:
        - |
          # Remove existing environment config
          if [ -f /etc/default/ktranslate.env ]; then
            sed -i "/^NR_ACCOUNT_ID/d" /etc/default/ktranslate.env
            sed -i "/^NEW_RELIC_API_KEY/d" /etc/default/ktranslate.env
            sed -i "/^NR_REGION/d" /etc/default/ktranslate.env
            sed -i "/^KT_FLAGS/d" /etc/default/ktranslate.env
          else
            touch /etc/default/ktranslate.env
          fi
        - |
          # Add our default config with populated variables
          if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
            echo 'NR_REGION="us_stage"' >> /etc/default/ktranslate.env
          # todo: check for EU/GOV regions
          else
            echo 'NR_REGION="us"' >> /etc/default/ktranslate.env
          fi

          echo 'NR_ACCOUNT_ID="{{.NEW_RELIC_ACCOUNT_ID}}"' >> /etc/default/ktranslate.env
          echo 'NEW_RELIC_API_KEY="{{.NEW_RELIC_LICENSE_KEY}}"' >> /etc/default/ktranslate.env
          echo 'KT_FLAGS="-snmp /etc/ktranslate/snmp-base.yaml -listen=127.0.0.1:8081 -metrics=jchf -tee_logs=true -dns=local -service_name={{.SERVICE_NAME}} nr1.syslog"' >> /etc/default/ktranslate.env

          chown ktranslate:ktranslate /etc/default/ktranslate.env
    configure_snmp_base:
      cmds:
        - |
          # TODO: determine if we need to take a CLI arg and move snmp-base from a tmp file to /etc/ktranslate/snmp-base.yaml

          # ktranslate must be owner so the ktranslate service can write new configs
          chown ktranslate:ktranslate /etc/ktranslate/snmp-base.yaml

    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            systemctl restart ktranslate
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              initctl restart ktranslate
            # else
            #   /etc/init.d/ktranslate restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

    assert_agent_started:
      cmds:
        - |
          # Ensure agent has enough time to start
          sleep 10
          IS_KTRANSLATE_INSTALLED=$(ps aux | grep ktranslate-service | wc -l)
          if [ $IS_KTRANSLATE_INSTALLED -eq 0 ] ; then
            echo "The ktranslate agent has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/network-performance-monitoring/setup-performance-monitoring/snmp-performance-monitoring" >&2
            exit 31
          fi

    assert_agent_status_ok:
      cmds:
        - |
          MAX_RETRIES=30
          TRIES=0
          echo ""
          echo "  Running agent status check attempt..."

          # wait for status endpoint to be ready
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            statusCheckOutput=$(curl 127.0.0.1:8081/service_info -s | /home/ubuntu/newrelic utils jq '.Sinks | has("new_relic")')
            if [ "$statusCheckOutput" == "true" ]; then
              echo "  Agent status check ok."
              break
            else
              if [ "$statusCheckOutput" == "" ]; then
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  echo "  ktranslate status endpoint not available" >&2
                  exit 32
                fi
              else
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  echo "  ktranslate status check not healthy: $statusCheckOutput" >&2
                  exit 33
                fi
              fi
            fi

            sleep 2
          done

    post_install_message:
      cmds:
        - |
          # Set the color variables for post install message
          green='\033[0;32m'
          clear='\033[0m'

          # Show post install message
          echo ""
          echo "  ------------------------"
          echo ""

          printf "  ** The ktranslate configuration file can be found in ${green}/etc/ktranslate/snmp-base.yaml${clear}. We recommend backing this file up periodically. **\n"

          echo ""
          echo "  Edit this file to make changes or configure advanced features for the agent. See the docs for options:"
          echo "  https://docs.newrelic.com/docs/network-performance-monitoring/advanced/advanced-config"
          echo ""
          echo "  ------------------------"
          echo ""

postInstall:
  info: |2
      ⚙️  The ktranslate configuration file can be found in /etc/ktranslate/snmp-base.yaml
      Edit this file to make changes or configure advanced features for the agent. See the docs for options:
      https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings
