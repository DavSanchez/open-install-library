# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

# Expected Variables:
#   CIDRS - comma-separated list of cidr ranges
#   DEFAULT_COMMUNITIES - comma-separated list of community strings

name: ktranslate-installer
displayName: Ktranslate agent integration
description: New Relic install recipe for the ktranslate network agent
repository: https://github.com/kentik/ktranslate

installTargets:
  - type: host
    os: linux
    platform: "ubuntu"

keywords:
  - Network
  - Agent
  - Linux
  - Debian
  - Jessie
  - Stretch
  - Buster

processMatch: []

successLinkConfig:
  type: EXPLORER

# validationUrl: "http://localhost:18003/v1/status/entity"

preInstall:
  info: |2
    The ktranslate installer will use the package manager for your system (rpm/deb)

  requireAtDiscovery: |
      IS_DOCKER_CONTAINER_CGROUP=$(grep 'docker\|lxc' /proc/1/cgroup | wc -l)
      if [ $IS_DOCKER_CONTAINER_CGROUP -gt 0 ] ; then
        echo "docker detected with cgroup, unsupported" >&2
        exit 131
      fi
      IS_DOCKER_CONTAINER_ENVIRON=$(grep container=lxc /proc/1/environ | wc -l)
      if [ $IS_DOCKER_CONTAINER_ENVIRON -gt 0 ] ; then
        echo "docker detected with environ, unsupported" >&2
        exit 131
      fi
      if [[ -f /.dockerenv ]] ; then
        echo "docker detected with .dockerenv, unsupported" >&2
        exit 131
      fi
      IS_WSL_CONTAINER=$(grep -i 'Microsoft' /proc/version | wc -l)
      if [ $IS_WSL_CONTAINER -gt 0 ] ; then
        echo "microsoft Windows Subsystem for Linux for infra detected, unsupported" >&2
        exit 131
      fi
      exit 0

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: setup_packagecloud_repository
        - task: install_ktranslate
        - task: setup_env
        - task: configure_snmp_base
        - task: restart
        - task: assert_agent_started
        - task: assert_agent_status_ok
        - task: post_install_message

    assert_pre_req:
      cmds:
        - |
          IS_ROOT_OR_SUDO=$([ ! -z "$SUDO_USER" ] || [ $(whoami) = "root" ] && echo "true" || echo "false") # Assert root or sudo user
          if [ "$IS_ROOT_OR_SUDO" = "false" ]; then
            echo "This newrelic install must be run under sudo or root" >&2
            exit 3
          fi
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >&2
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >&2
            exit 11
          fi
        - |
          IS_AWK_INSTALLED=$(which awk | wc -l)
          if [ $IS_AWK_INSTALLED -eq 0 ] ; then
            echo "awk is required to run the newrelic install. Please install awk and re-run the installation." >&2
            exit 12
          fi
        - |
          IS_CAT_INSTALLED=$(which cat | wc -l)
          if [ $IS_CAT_INSTALLED -eq 0 ] ; then
            echo "cat is required to run the newrelic install. Please install cat and re-run the installation." >&2
            exit 13
          fi
        - |
          IS_TEE_INSTALLED=$(which tee | wc -l)
          if [ $IS_TEE_INSTALLED -eq 0 ] ; then
            echo "tee is required to run the newrelic install. Please install tee and re-run the installation." >&2
            exit 14
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >&2
            exit 15
          fi
        # - |
        #   if [ -n "{{.DEBIAN_CODENAME}}" ]; then
        #     IS_INFRA_AVAILABLE=$(curl -Is {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/apt/dists/{{.DEBIAN_CODENAME}}/InRelease | grep " 2[0-9][0-9] " | wc -l)
        #     if [ $IS_INFRA_AVAILABLE -eq 0 ] ; then
        #       echo "there is no newrelic infrastructure agent available for the distribution with codename '{{.DEBIAN_CODENAME}}'." >&2
        #       exit 131
        #     fi
        #   else
        #     if [ -n "{{.DEBIAN_VERSION_CODENAME}}" ]; then
        #       IS_INFRA_AVAILABLE=$(curl -Is {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/apt/dists/{{.DEBIAN_VERSION_CODENAME}}/InRelease | grep " 2[0-9][0-9] " | wc -l)
        #       if [ $IS_INFRA_AVAILABLE -eq 0 ] ; then
        #         echo "there is no newrelic infrastructure agent available for the distribution with version codename '{{.DEBIAN_VERSION_CODENAME}}'." >&2
        #         exit 131
        #       fi
        #     else
        #       echo "there is no newrelic infrastructure agent available for the distribution, no version codename was found." >&2
        #       exit 131
        #     fi
        #   fi
      vars:
        DEBIAN_CODENAME:
          sh: awk -F= '/VERSION_CODENAME/ {print $2}' /etc/os-release
        DEBIAN_VERSION_CODENAME:
          sh: cat /etc/os-release | grep "VERSION=\"[0-9] " | awk -F " " '{print $2}' | sed 's/[()"]//g'

  # cleanup:
  #   cmds:
  #     - |
  #       rm -rf /var/db/newrelic-infra/data

    setup_packagecloud_repository:
      cmds:
        - |
          curl -s https://packagecloud.io/install/repositories/kentik/ktranslate/script.deb.sh | sudo bash > /dev/null
      silent: true

    install_ktranslate:
      cmds:
        - |
          sudo apt-get install ktranslate -y > /dev/null
      slient: true

    setup_env:
      cmds:
        - |
          if [ -f /etc/default/ktranslate.env ]; then
            sed -i "/^NR_ACCOUNT_ID/d" /etc/default/ktranslate.env
            sed -i "/^NEW_RELIC_API_KEY/d" /etc/default/ktranslate.env
            sed -i "/^NR_REGION/d" /etc/default/ktranslate.env
            sed -i "/^KT_FLAGS/d" /etc/default/ktranslate.env

          else
            touch /etc/default/ktranslate.env
          fi
        - |
          if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
            echo 'NR_REGION="us_stage"' >> /etc/default/ktranslate.env

          else
            echo 'NR_REGION="us"' >> /etc/default/ktranslate.env
          fi

          echo 'NR_ACCOUNT_ID="{{.NEW_RELIC_ACCOUNT_ID}}"' >> /etc/default/ktranslate.env
          echo 'NEW_RELIC_API_KEY="{{.NEW_RELIC_LICENSE_KEY}}"' >> /etc/default/ktranslate.env
          # echo 'KT_FLAGS="-snmp /etc/ktranslate/snmp-base.yaml -metalisten=127.0.0.1:8089 -metrics=jchf -tee_logs=true -service_name=snmp nr1.snmp"' >> /etc/default/ktranslate.env
          echo 'KT_FLAGS="-snmp /etc/ktranslate/snmp-base.yml -metalisten=127.0.0.1:8089 -metrics=jchf -tee_logs=true -service_name=snmp -snmp_discovery_on_start=true -snmp_discovery_min=60 nr1.snmp"' >> /etc/default/ktranslate.env

          chown ktranslate:ktranslate /etc/default/ktranslate.env
    configure_snmp_base:
      cmds:
        - |
          if [ -f /etc/ktranslate/snmp-base.yml ]; then
            sudo rm /etc/ktranslate/snmp-base.yml;
          fi

          # save current IFS for later
          OLD_IFS=$IFS
          IFS=","

          echo "devices:" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "trap:" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  listen: 127.0.0.1:1620" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "discovery:" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  cidrs:" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null

          # Cidrs from input
          read -r CIDRS <<< $CIDRS
          for i in "${CIDRS[@]}"; do
            echo "  - $i" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          done

          echo "  ignore_list: []" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  debug: false" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  ports:" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  - 161" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  default_communities:" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null

          # Communities from input
          read -r DEFAULT_COMMUNITIES <<< $DEFAULT_COMMUNITIES
          for i in "${DEFAULT_COMMUNITIES[@]}"; do
            echo "  - $i" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          done

          echo "  default_v3: null" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  add_devices: true" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  add_mibs: true" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  threads: 4" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  replace_devices: true" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  check_all_ips: true" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "global:" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  poll_time_sec: 300" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  mib_profile_dir: /etc/ktranslate/profiles" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  mibs_enabled:" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  - IF-MIB" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  timeout_ms: 3000" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null
          echo "  retries: 0" | tee -a /etc/ktranslate/snmp-base.yml > /dev/null

          # reset IFS
          IFS=$OLD_IFS

          # ktranslate must be owner so the ktranslate service can write new configs
          chown ktranslate:ktranslate /etc/ktranslate/snmp-base.yml

          # sudo tee /etc/newrelic-infra/integrations.d/redis-config.yml > /dev/null <<EOT
          # devices:
          # trap:
          #   listen: 127.0.0.1:1620
          # discovery:
          #   cidrs:
          #   - 10.10.0.0/24
          #   ignore_list: []
          #   debug: false
          #   ports:
          #   - 161
          #   default_communities:
          #   - public
          #   default_v3: null
          #   add_devices: true
          #   add_mibs: true
          #   threads: 4
          #   replace_devices: true
          #   check_all_ips: true
          # global:
          #   poll_time_sec: 300
          #   mib_profile_dir: /etc/ktranslate/profiles
          #   mibs_enabled:
          #   - IF-MIB
          #   timeout_ms: 3000
          #   retries: 0
          # EOT


    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            systemctl restart ktranslate
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              initctl restart ktranslate
            # else
            #   /etc/init.d/ktranslate restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

    assert_agent_started:
      cmds:
        - |
          # Ensure agent has enough time to start
          sleep 10
          IS_KTRANSLATE_INSTALLED=$(ps aux | grep ktranslate-service | wc -l)
          if [ $IS_KTRANSLATE_INSTALLED -eq 0 ] ; then
            echo "The ktranslate agent has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/network-performance-monitoring/setup-performance-monitoring/snmp-performance-monitoring" >&2
            exit 31
          fi

    assert_agent_status_ok:
      cmds:
        - |
          MAX_RETRIES=30
          TRIES=0
          echo ""
          echo "  Running agent status check attempt..."

          # wait for status endpoint to be ready
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            statusCheckOutput=$(curl 127.0.0.1:8089/healthcheck -s | /home/ubuntu/newrelic utils jq '.success')
            if [ "$statusCheckOutput" == "true" ]; then
              echo "  Agent status check ok."
              break
            else
              if [ "$statusCheckOutput" == "" ]; then
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  echo "  ktranslate status endpoint not available" >&2
                  exit 32
                fi
              else
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  echo "  ktranslate status check not healthy: $statusCheckOutput" >&2
                  exit 33
                fi
              fi
            fi

            sleep 2
          done

    post_install_message:
      cmds:
        - |
          # Set the color variables for post install message
          green='\033[0;32m'
          clear='\033[0m'

          # Show post install message
          echo ""
          echo "  ------------------------"
          echo ""

          printf "  ** The ktranslate configuration file can be found in ${green}/etc/ktranslate/snmp-base.yml${clear}. We recommend backing this file up periodically. **\n"

          echo ""
          echo "  Edit this file to make changes or configure advanced features for the agent. See the docs for options:"
          echo "  https://docs.newrelic.com/docs/network-performance-monitoring/advanced/advanced-config"
          echo ""
          echo "  ------------------------"
          echo ""

postInstall:
  info: |2
      ⚙️  The ktranslate configuration file can be found in /etc/ktranslate/snmp-base.yml
      Edit this file to make changes or configure advanced features for the agent. See the docs for options:
      https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings
