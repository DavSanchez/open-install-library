# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

# Expected Variables:
#   CIDRS - comma-separated list of cidr ranges
#   POLL_TIME_SEC - numeric value indicating default global poll time
#   SNMP_DISCOVERY_MIN - numeric value indicating default discovery interval
#
# Variables based on SNMP version:
#   SNMP v1 / v2c:
#     DEFAULT_COMMUNITIES - comma-separated list of community strings
#   SNMP v3:
#     USER_NAME
#     AUTHENTICATION_PROTOCOL
#     PRIVACY_PROTOCOL
#     Optional Vars:
#       AUTHENTICATION_PASSPHRASE
#       PRIVACY_PASSPHRASE
#       CONTEXT_ENGINE_ID
#       CONTEXT_NAME

name: ktranslate-snmp-installer
displayName: Ktranslate agent integration
description: New Relic install recipe for the ktranslate network agent
repository: https://github.com/kentik/ktranslate

installTargets:
  - type: host
    os: linux
    platformFamily: "debian"
  - type: host
    os: linux
    platformFamily: "rhel"

keywords:
  - Network
  - Agent
  - Linux
  - Debian
  - Jessie
  - Stretch
  - Buster

processMatch: []

successLinkConfig:
  type: EXPLORER

preInstall:
  info: |2
    The ktranslate installer will use the package manager for your system (rpm/deb)

  requireAtDiscovery: |
    # Check required input variables - this effectively removes the ktranslate install from the
    # default guided install mode where discovery takes place
    if [[ -z "${CIDRS}" ]]; then
      echo "CIDRS env var must be set" >&2
      exit 47
    fi

    if [[ -z "${POLL_TIME_SEC}" ]]; then
      echo "POLL_TIME_SEC env var must be set" >&2
      exit 47
    fi

    if [[ -z "${SNMP_DISCOVERY_MIN}" ]]; then
      echo "SNMP_DISCOVERY_MIN env var must be set" >&2
      exit 47
    fi
    exit 0

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: input_assert
        - task: setup_packagecloud_repository
        - task: install_ktranslate
        - task: setup_env
        - task: configure_snmp_base
        - task: restart
        - task: assert_agent_started
        - task: assert_agent_status_ok
        - task: post_install_message

    assert_pre_req:
      cmds:
        - |
          IS_ROOT_OR_SUDO=$([ ! -z "$SUDO_USER" ] || [ $(whoami) = "root" ] && echo "true" || echo "false") # Assert root or sudo user
          if [ "$IS_ROOT_OR_SUDO" = "false" ]; then
            echo "This newrelic install must be run under sudo or root" >&2
            exit 3
          fi
        - |
          IS_DOCKER_CONTAINER_CGROUP=$(grep 'docker\|lxc' /proc/1/cgroup | wc -l)
          if [ $IS_DOCKER_CONTAINER_CGROUP -gt 0 ] ; then
            echo "docker detected with cgroup, unsupported" >&2
            exit 131
          fi
        - |
          IS_DOCKER_CONTAINER_ENVIRON=$(grep container=lxc /proc/1/environ | wc -l)
          if [ $IS_DOCKER_CONTAINER_ENVIRON -gt 0 ] ; then
            echo "docker detected with environ, unsupported" >&2
            exit 131
          fi
        - |
          if [[ -f /.dockerenv ]] ; then
            echo "docker detected with .dockerenv, unsupported" >&2
            exit 131
          fi
        - |
          IS_WSL_CONTAINER=$(grep -i 'Microsoft' /proc/version | wc -l)
          if [ $IS_WSL_CONTAINER -gt 0 ] ; then
            echo "microsoft Windows Subsystem for Linux detected, unsupported" >&2
            exit 131
          fi
        - |
          # Map of tool names to the associated error code
          required_tools_and_error_codes="grep:10 sed:11 awk:12 cat:13 tee:14 touch:15 tr:16"

          for tuple in $required_tools_and_error_codes; do
            tool=$(echo ${tuple} |cut -d':' -f1)
            code=$(echo ${tuple} |cut -d':' -f2)

            IS_TOOL_INSTALLED=$(which ${tool} | wc -l)
            if [ "$IS_TOOL_INSTALLED" -eq 0 ]
            then
              echo -e "{{.RED}}This installation requires '${tool}' to be installed.{{.NOCOLOR}}" >> /dev/stderr
              exit ${code}
            fi
          done

    input_assert:
      cmds:
        - |
          # Check Env Vars
          CIDRS="{{.CIDRS}}"
          POLL_TIME_SEC="{{.POLL_TIME_SEC}}"
          SNMP_DISCOVERY_MIN="{{.SNMP_DISCOVERY_MIN}}"
          DEFAULT_COMMUNITIES="{{.DEFAULT_COMMUNITIES}}"
          USER_NAME="{{.USER_NAME}}"
          AUTHENTICATION_PROTOCOL="{{.AUTHENTICATION_PROTOCOL}}"
          PRIVACY_PROTOCOL="{{.PRIVACY_PROTOCOL}}"

          # Check required input variables
          if [[ -z "${CIDRS}" ]]; then
            echo "CIDRS env var must be set" >&2
            exit 47
          fi

          if [[ -z "${POLL_TIME_SEC}" ]]; then
            echo "POLL_TIME_SEC env var must be set" >&2
            exit 47
          fi
          if [[ -z "${SNMP_DISCOVERY_MIN}" ]]; then
            echo "SNMP_DISCOVERY_MIN env var must be set" >&2
            exit 47
          fi

          # SNMP version differences
          if [[ -z "${DEFAULT_COMMUNITIES}" ]]; then
            # Check for v1 / v2c - if default_communities is empty and all v3 options are empty,
            # assume this was SNMP v1/v2c
            if [[ -z "${USER_NAME}" ]] && [[ -z "${AUTHENTICATION_PROTOCOL}" ]] && [[ -z "${PRIVACY_PROTOCOL}" ]]; then
              echo "DEFAULT_COMMUNITIES env var must be set for SNMP v1/v2c" >&2
              exit 47
            fi

            # At this point, assume SNMP v3 and check required fields
            if [[ -z "${USER_NAME}" ]]; then
              echo "USER_NAME env var must be set for SNMP v3" >&2
              exit 47
            fi
            if [[ -z "${AUTHENTICATION_PROTOCOL}" ]]; then
              echo "AUTHENTICATION_PROTOCOL env var must be set for SNMP v3" >&2
              exit 47
            fi
            if [[ -z "${PRIVACY_PROTOCOL}" ]]; then
              echo "PRIVACY_PROTOCOL env var must be set for SNMP v3" >&2
              exit 47
            fi
          fi

          # TODO: attempt snmpwalk against cidr input to ensure connectivity

    setup_packagecloud_repository:
      cmds:
        - |
          if [ "{{.PLATFORM_FAMILY" == "debian" ]; then
            curl -s https://packagecloud.io/install/repositories/kentik/ktranslate/script.deb.sh | sudo bash > /dev/null
          else
            curl -s https://packagecloud.io/install/repositories/kentik/ktranslate/script.rpm.sh | sudo bash
          fi
      silent: true

    install_ktranslate:
      cmds:
        - |
          if [ "{{.PLATFORM_FAMILY" == "debian" ]; then
            sudo apt-get install ktranslate -y > /dev/null
          else
            sudo yum install ktranslate -q -y > /dev/null
          fi
      slient: true

    setup_env:
      cmds:
        - |
          # Remove existing environment config
          if [ -f /etc/default/ktranslate.env ]; then
            sed -i "/^NR_ACCOUNT_ID/d" /etc/default/ktranslate.env
            sed -i "/^NEW_RELIC_API_KEY/d" /etc/default/ktranslate.env
            sed -i "/^NR_REGION/d" /etc/default/ktranslate.env
            sed -i "/^KT_FLAGS/d" /etc/default/ktranslate.env
          else
            touch /etc/default/ktranslate.env
          fi
        - |
          # Add our default config with populated variables
          if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
            echo 'NR_REGION="us_stage"' >> /etc/default/ktranslate.env
          # todo: check for EU/GOV regions
          else
            echo 'NR_REGION="us"' >> /etc/default/ktranslate.env
          fi

          echo 'NR_ACCOUNT_ID="{{.NEW_RELIC_ACCOUNT_ID}}"' >> /etc/default/ktranslate.env
          echo 'NEW_RELIC_API_KEY="{{.NEW_RELIC_LICENSE_KEY}}"' >> /etc/default/ktranslate.env
          echo 'KT_FLAGS="-snmp /etc/ktranslate/snmp-base.yaml -listen=127.0.0.1:8081 -metrics=jchf -tee_logs=true -service_name=snmp -snmp_discovery_on_start=true -snmp_discovery_min={{.SNMP_DISCOVERY_MIN}} nr1.snmp"' >> /etc/default/ktranslate.env

          chown ktranslate:ktranslate /etc/default/ktranslate.env
    configure_snmp_base:
      cmds:
        - |
          # Technique for below: https://askubuntu.com/a/752451
          # Use a here string and a command substitution to read the file before any command is run

          # CIDRS
          sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq 'del(.discovery.cidrs)' > /etc/ktranslate/snmp-base.yaml
          CIDRS_ARR=($(echo $CIDRS | tr ',' "\n"))
          for i in "${CIDRS_ARR[@]}"; do
            sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.cidrs += ["'$i'"]' > /etc/ktranslate/snmp-base.yaml
          done

          # POLL_TIME_SEC
          sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq 'del(.global.poll_time_sec)' > /etc/ktranslate/snmp-base.yaml
          sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.global.poll_time_sec += '$POLL_TIME_SEC'' > /etc/ktranslate/snmp-base.yaml

          # SNMP v3
          if [[ -z "${DEFAULT_COMMUNITIES}" ]]; then
            # SNMP_DISCOVERY_MIN="{{.SNMP_DISCOVERY_MIN}}"
            # USER_NAME="{{.USER_NAME}}"
            # AUTHENTICATION_PROTOCOL="{{.AUTHENTICATION_PROTOCOL}}"
            # PRIVACY_PROTOCOL="{{.PRIVACY_PROTOCOL}}"
            # AUTHENTICATION_PASSPHRASE="{{.AUTHENTICATION_PASSPHRASE}}"
            # PRIVACY_PASSPHRASE="{{.PRIVACY_PASSPHRASE}}"
            # CONTEXT_ENGINE_ID="{{.CONTEXT_ENGINE_ID}}"
            # CONTEXT_NAME="{{.CONTEXT_NAME}}"

            # delete all default_v3 values
            sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq 'del(.discovery.default_v3)' > /etc/ktranslate/snmp-base.yaml

            # write all required fields
            sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.default_v3.snmp_discovery_min += "'$SNMP_DISCOVERY_MIN'"' > /etc/ktranslate/snmp-base.yaml
            sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.default_v3.user_name += "'$USER_NAME'"' > /etc/ktranslate/snmp-base.yaml
            sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.default_v3.authentication_protocol += "'$AUTHENTICATION_PROTOCOL'"' > /etc/ktranslate/snmp-base.yaml
            sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.default_v3.privacy_protocol += "'$PRIVACY_PROTOCOL'"' > /etc/ktranslate/snmp-base.yaml

            # OPTIONAL FIELDS
            if [[ -z "${AUTHENTICATION_PASSPHRASE}" ]]; then
              sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.default_v3.authentication_passphrase += "'$AUTHENTICATION_PASSPHRASE'"' > /etc/ktranslate/snmp-base.yaml
            fi
            if [[ -z "${PRIVACY_PASSPHRASE}" ]]; then
              sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.default_v3.privacy_passphrase += "'$PRIVACY_PASSPHRASE'"' > /etc/ktranslate/snmp-base.yaml
            fi
            if [[ -z "${CONTEXT_ENGINE_ID}" ]]; then
              sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.default_v3.context_engine_id += "'$CONTEXT_ENGINE_ID'"' > /etc/ktranslate/snmp-base.yaml
            fi
            if [[ -z "${CONTEXT_NAME}" ]]; then
              sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.default_v3.context_name += "'$CONTEXT_NAME'"' > /etc/ktranslate/snmp-base.yaml
            fi
          else
            # SNMP v1 / v2c
            sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq 'del(.discovery.default_communities)' > /etc/ktranslate/snmp-base.yaml
            DEFAULT_COMMUNITIES_ARR=($(echo $DEFAULT_COMMUNITIES | tr ',' "\n"))
            for i in "${DEFAULT_COMMUNITIES_ARR[@]}"; do
              sudo <<<"$(</etc/ktranslate/snmp-base.yaml)" /usr/local/bin/newrelic utils yq '.discovery.default_communities += ["'$i'"]' > /etc/ktranslate/snmp-base.yaml
            done
          fi

          # ktranslate must be owner so the ktranslate service can write new configs
          chown ktranslate:ktranslate /etc/ktranslate/snmp-base.yaml

    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            systemctl restart ktranslate
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              initctl restart ktranslate
            # else
            #   /etc/init.d/ktranslate restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

    assert_agent_started:
      cmds:
        - |
          # Ensure agent has enough time to start
          sleep 10
          IS_KTRANSLATE_INSTALLED=$(ps aux | grep ktranslate-service | wc -l)
          if [ $IS_KTRANSLATE_INSTALLED -eq 0 ] ; then
            echo "The ktranslate agent has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/network-performance-monitoring/setup-performance-monitoring/snmp-performance-monitoring" >&2
            exit 31
          fi

    assert_agent_status_ok:
      cmds:
        - |
          MAX_RETRIES=30
          TRIES=0
          echo ""
          echo "  Running agent status check attempt..."

          # wait for status endpoint to be ready
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            statusCheckOutput=$(curl 127.0.0.1:8081/service_info -s | /home/ubuntu/newrelic utils jq '.Sinks | has("new_relic")')
            if [ "$statusCheckOutput" == "true" ]; then
              echo "  Agent status check ok."
              break
            else
              if [ "$statusCheckOutput" == "" ]; then
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  echo "  ktranslate status endpoint not available" >&2
                  exit 32
                fi
              else
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  echo "  ktranslate status check not healthy: $statusCheckOutput" >&2
                  exit 33
                fi
              fi
            fi

            sleep 2
          done

    post_install_message:
      cmds:
        - |
          # Set the color variables for post install message
          green='\033[0;32m'
          clear='\033[0m'

          # Show post install message
          echo ""
          echo "  ------------------------"
          echo ""

          printf "  ** The ktranslate configuration file can be found in ${green}/etc/ktranslate/snmp-base.yaml${clear}. We recommend backing this file up periodically. **\n"

          echo ""
          echo "  Edit this file to make changes or configure advanced features for the agent. See the docs for options:"
          echo "  https://docs.newrelic.com/docs/network-performance-monitoring/advanced/advanced-config"
          echo ""
          echo "  ------------------------"
          echo ""

postInstall:
  info: |2
      ⚙️  The ktranslate configuration file can be found in /etc/ktranslate/snmp-base.yaml
      Edit this file to make changes or configure advanced features for the agent. See the docs for options:
      https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings
