---
- debug:
    msg: Install Kafka

- name: Set default create_env_var (default not create)
  set_fact:
    create_env_var: "false"
  when: create_env_var is undefined

- name: update packages
  shell: yum update -y  
  become: true 

- name: install java
  shell: yum install java-1.8.0-openjdk -y
  become: true 

- name: download kafka
  shell: wget "https://www.apache.org/dist/kafka/2.6.1/kafka_2.13-2.6.1.tgz" -P /etc/ 
  become: true 

- name: create and change directory
  shell: mkdir /etc/kafka && cd /etc/kafka
  become: true 

- name: extract tgz file
  shell: tar -xzf /etc/kafka_2.13-2.6.1.tgz -C /etc/kafka/
  become: true 

- name: Copy Server Properties
  template: 
      src: server.properties
      dest: /etc/kafka/kafka_2.13-2.6.1/config/server.properties
  become: true

- name: Copy Zookeeper service file
  template:
      src: zookeeper.service
      dest: /etc/systemd/system/zookeeper.service
  become: true

- name: Copy Kafka service file
  template:
      src: kafka.service
      dest: /etc/systemd/system/kafka.service
  become: true

- name: Add jmx rules to jmx_kafka_oprs
  shell: "sudo sed -i 's/-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false/-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost -Djava.net.preferIPv4Stack=true/g' /etc/kafka/kafka_2.13-2.6.1/bin/kafka-run-class.sh"
  become: true

- name: restart daemon
  shell: systemctl daemon-reload
  become: true

- name: run zookeeper
  shell: systemctl start zookeeper.service
  become: true 

- name: run kafka
  shell: systemctl start kafka.service
  become: true

- name: wait
  wait_for:
    timeout: 10
  become: true

- name: create topic
  shell: /etc/kafka/kafka_2.13-2.6.1/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic topic_1
  become: true 

- name: push hello string
  shell: echo "Hello, World" | /etc/kafka/kafka_2.13-2.6.1/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic topic_1 > /dev/null
  become: true

- name: crete consumer group
  shell: /etc/kafka/kafka_2.13-2.6.1/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic topic_1 --group test &
  become: true

- name: check if group exist
  shell: /etc/kafka/kafka_2.13-2.6.1/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group test &
  become: true

- block:
  - name: Export NR_CLI_CLUSTERNAME
    shell: "echo export NR_CLI_CLUSTERNAME=testCluster >> ~/.bashrc"
  - name: Export NR_CLI_USING_AUTHORIZATION
    shell: "echo export NR_CLI_USING_AUTHORIZATION=n >> ~/.bashrc"
  - name: Export NR_CLI_KAFKA_VERSION
    shell: "echo export NR_CLI_KAFKA_VERSION=1.0.0 >> ~/.bashrc"
  - name: Export NR_CLI_AUTODISCOVER_STRATEGY
    shell: "echo export NR_CLI_AUTODISCOVER_STRATEGY=zookeeper >> ~/.bashrc"
  - name: Export NR_CLI_ZOOKEPER_AUTH_SCHEME
    shell: "echo export NR_CLI_ZOOKEPER_AUTH_SCHEME=none >> ~/.bashrc"
  - name: Export NR_CLI_ZOOKEEPER_AUTH_SECRET
    shell: "echo export NR_CLI_ZOOKEEPER_AUTH_SECRET=unused >> ~/.bashrc"
  - name: Export NR_CLI_ZOOKEEPER_PATH
    shell: "echo export NR_CLI_ZOOKEEPER_PATH=/ >> ~/.bashrc"
  - name: Export NR_CLI_ZOOKEEPER_PREFERRED_LISTENER
    shell: "echo export NR_CLI_ZOOKEEPER_PREFERRED_LISTENER=PLAINTEXT >> ~/.bashrc"
  - name: Export NR_CLI_BOOTSTRAP_BROKER_HOST
    shell: "echo export NR_CLI_BOOTSTRAP_BROKER_HOST=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_BOOTSTRAP_BROKER_KAFKA_PORT
    shell: "echo export NR_CLI_BOOTSTRAP_BROKER_KAFKA_PORT=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_BOOTSTRAP_BROKER_JMX_PORT
    shell: "echo export NR_CLI_BOOTSTRAP_BROKER_JMX_PORT=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_BOOTSTRAP_BROKER_KAFKA_PROTOCOL
    shell: "echo export NR_CLI_BOOTSTRAP_BROKER_KAFKA_PROTOCOL=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_BOOTSTRAP_BROKER_JMX_USER
    shell: "echo export NR_CLI_BOOTSTRAP_BROKER_JMX_USER=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_BOOTSTRAP_BROKER_JMX_PASSWORD
    shell: "echo export NR_CLI_BOOTSTRAP_BROKER_JMX_PASSWORD=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_USING_COLLECTION_FILTERING
    shell: "echo export NR_CLI_USING_COLLECTION_FILTERING=n >> ~/.bashrc"
  - name: Export NR_CLI_COLLECTION_FILTERING_TOPIC_MODE
    shell: "echo export NR_CLI_COLLECTION_FILTERING_TOPIC_MODE=List >> ~/.bashrc"
  - name: Export NR_CLI_COLLECTION_FILTERING_TOPIC_DATA
    shell: "echo export NR_CLI_COLLECTION_FILTERING_TOPIC_MODE=false >> ~/.bashrc"
  - name: Export NR_CLI_COLLECTION_FILTERING_LOCAL_ONLY_COLLECTION
    shell: "echo export NR_CLI_COLLECTION_FILTERING_LOCAL_ONLY_COLLECTION=false >> ~/.bashrc"
  - name: Export NR_CLI_COLLECTION_FILTERING_CONSUMER_GROUP_REGEX
    shell: "echo export NR_CLI_COLLECTION_FILTERING_CONSUMER_GROUP_REGEX=test >> ~/.bashrc"
  - name: Export NR_CLI_COLLECTION_FILTERING_COLLECT_TOPIC_SIZE
    shell: "echo export NR_CLI_COLLECTION_FILTERING_COLLECT_TOPIC_SIZE=false >> ~/.bashrc"
  - name: Export NR_CLI_COLLECTION_FILTERING_TOPIC_LIST
    shell: "echo export NR_CLI_COLLECTION_FILTERING_TOPIC_LIST=topic_1 >> ~/.bashrc"
  - name: Export NR_CLI_COLLECTION_FILTERING_TOPIC_REGEX
    shell: "echo export NR_CLI_COLLECTION_FILTERING_TOPIC_REGEX=notused >> ~/.bashrc"
  - name: Export NR_CLI_COLLECTION_FILTERING_TOPIC_BUCKET
    shell: "echo export NR_CLI_COLLECTION_FILTERING_TOPIC_BUCKET=1/1 >> ~/.bashrc"
  - name: Export NR_CLI_USING_SASL
    shell: "echo export NR_CLI_USING_SASL=n >> ~/.bashrc"
  - name: Export NR_CLI_SASL_MECHANISM
    shell: "echo export NR_CLI_SASL_MECHANISM=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_SASL_GSSAPI_REALM
    shell: "echo export NR_CLI_SASL_GSSAPI_REALM=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_SASL_GSSAPI_SERVICE_NAME
    shell: "echo export NR_CLI_SASL_GSSAPI_SERVICE_NAME=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_SASL_GSSAPI_USERNAME
    shell: "echo export NR_CLI_SASL_GSSAPI_USERNAME=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_SASL_GSSAPI_KEY_TAB_PATH
    shell: "echo export NR_CLI_SASL_GSSAPI_KEY_TAB_PATH=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_SASL_GSSAPI_KERBEROS_CONFIG_PATH
    shell: "echo export NR_CLI_SASL_GSSAPI_KERBEROS_CONFIG_PATH=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_USING_JMX_CONNECTION_OPTIONS
    shell: "echo export NR_CLI_USING_JMX_CONNECTION_OPTIONS=n >> ~/.bashrc"
  - name: Export NR_CLI_USING_JMX_SSL
    shell: "echo export NR_CLI_USING_JMX_SSL=n >> ~/.bashrc"
  - name: Export NR_CLI_KEYSTORE_FILE
    shell: "echo export NR_CLI_KEYSTORE_FILE=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_KEYSTORE_PASSWORD
    shell: "echo export NR_CLI_KEYSTORE_PASSWORD=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_TRUSTSTORE_FILE
    shell: "echo export NR_CLI_TRUSTSTORE_FILE=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_TRUSTSTORE_PASSWORD
    shell: "echo export NR_CLI_TRUSTSTORE_PASSWORD=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_DEFAULT_JMX_HOST
    shell: "echo export NR_CLI_DEFAULT_JMX_HOST=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_DEFAULT_JMX_PORT
    shell: "echo export NR_CLI_DEFAULT_JMX_PORT=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_DEFAULT_JMX_USER
    shell: "echo export NR_CLI_DEFAULT_JMX_USER=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_DEFAULT_JMX_PASSWORD
    shell: "echo export NR_CLI_DEFAULT_JMX_PASSWORD=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_USING_SSL
    shell: "echo export NR_CLI_USING_SSL=n >> ~/.bashrc"
  - name: Export NR_CLI_TLS_CA_FILE
    shell: "echo export NR_CLI_TLS_CA_FILE=n >> ~/.bashrc"
  - name: Export NR_CLI_TLS_CERT_FILE
    shell: "echo export NR_CLI_TLS_CERT_FILE=n >> ~/.bashrc"
  - name: Export NR_CLI_TLS_KEY_FILE
    shell: "echo export NR_CLI_TLS_KEY_FILE=n >> ~/.bashrc"
  - name: Export NR_CLI_TLS_INSECURE_KEY_FILE
    shell: "echo export NR_CLI_TLS_INSECURE_KEY_FILE=n >> ~/.bashrc"
  - name: Export NR_CLI_CONSUMER_NAME
    shell: "echo export NR_CLI_CONSUMER_NAME=my-consumer >> ~/.bashrc"
  - name: Export NR_CLI_CONSUMER_ZOOKEEPER_HOST
    shell: "echo export NR_CLI_CONSUMER_ZOOKEEPER_HOST=localhost >> ~/.bashrc"
  - name: Export NR_CLI_CONSUMER_ZOOKEEPER_PORT
    shell: "echo export NR_CLI_CONSUMER_ZOOKEEPER_PORT=9987 >> ~/.bashrc"
  - name: Export NR_CLI_CONSUMER_USERNAME
    shell: "echo export NR_CLI_CONSUMER_USERNAME=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_CONSUMER_PASSOWRD
    shell: "echo export NR_CLI_CONSUMER_PASSOWRD=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_PRODUCER_NAME
    shell: "echo export NR_CLI_PRODUCER_NAME=my-producer >> ~/.bashrc"
  - name: Export NR_CLI_PRODUCER_ZOOKEEPER_HOST
    shell: "echo export NR_CLI_PRODUCER_ZOOKEEPER_HOST=localhost >> ~/.bashrc"
  - name: Export NR_CLI_PRODUCER_ZOOKEEPER_PORT
    shell: "echo export NR_CLI_PRODUCER_ZOOKEEPER_PORT=9989 >> ~/.bashrc"
  - name: Export NR_CLI_PRODUCER_USERNAME
    shell: "echo export NR_CLI_PRODUCER_USERNAME=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_PRODUCER_PASSOWRD
    shell: "echo export NR_CLI_PRODUCER_PASSOWRD=notUsed >> ~/.bashrc"
  - name: Export NR_CLI_ZOOKEEPER_HOST
    shell: "echo export NR_CLI_ZOOKEEPER_HOST=localhost >> ~/.bashrc"
  - name: Export NR_CLI_ZOOKEEPER_PORT
    shell: "echo export NR_CLI_ZOOKEEPER_PORT=2181 >> ~/.bashrc"
  when: create_env_var|bool
